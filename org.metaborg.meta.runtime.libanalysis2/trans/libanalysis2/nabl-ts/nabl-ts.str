module libanalysis2/nabl-ts/nabl-ts

imports
  
  runtime/editor/origins
  runtime/editor/annotations
  src-gen/signatures/libanalysis2/-
  libanalysis2/pp

rules
  
  nabl-ts-constraint(|facts, constraints, scopes) = fail

rules

  do-extract-constraint =
    ?ast;
    // Ensure all dynamic rules are properly scoped
    try(dr-scope-all-end);
    dr-scope-all-start;
    scope-counter := <new-counter>;
    var-counter := <new-counter>;
    rules( NewScope: _ -> <next-counter> scope-counter
           NewVar: _ -> <next-counter> var-counter
         );
    facts := <new-iset>;
    constraints := <new-iset>;
    tvars := <new-hashtable>;
    ast' := <
    	annotate-keys; 
      nabl-ts-traverse(|facts, constraints, [Global()])> ast;
    f* := <iset-elements> facts;
    c* := <iset-elements> constraints;
    try(dr-scope-all-end);
    !(ast', [f*, c*])

  annotate-keys = topdown(annotate-key)
 
  annotate-key: t -> t{<newname> ""}
  
  nabl-ts-traverse(|facts, constraints, scopes) =
     debug(!"enter "); nabl-ts-constraint(|facts, constraints, scopes); debug(!"custom rule successful ")
  <+ debug(!"custom rule failed "); nabl-ts-traverse-children(|facts, constraints, scopes); debug(!"generic rule successful ")
  <+ <debug(!"generic rule failed ")> scopes ; fail
  
  nabl-ts-traverse-children(|facts, constraints, scopes) =
    with(
    	get-arguments;
    	map(nabl-ts-traverse(|facts, constraints, scopes))
    )

  type-app = ?Var(_)