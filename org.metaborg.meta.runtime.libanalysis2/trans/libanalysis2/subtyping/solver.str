module libanalysis2/subtyping/solver

imports
  src-gen/signatures/libanalysis2/-
  libanalysis2/solver/-
  libanalysis2/subtyping/-
  libanalysis2/prelude/-
  libanalysis2/pp

rules
 
  solve-constraint: (f@FSubType(tyd@TDef(tc,_),ty,pos),sol-wm) -> [(sol-wm',[])]
  where <is-ground> (tyd,ty)
      ; <fromWM;sol-x> sol-wm => x*
      ; <build-subtype-relation(|x*)> (tyd,ty) => sr
  with ( <lookup> (tc, x*)
       < <add-error(|(pos,$[Duplicate fact [<pp-Analysis-string> f]]))> sol-wm
       + <fmap(<sol-set-x(|sr)> (tc,<id>))> sol-wm
       ) => sol-wm'

rules

  solve-constraint: (CSubType(ty1,ty2,pos),sol-wm) -> [res]
  where <is-ground> (ty1,ty2)
  with <fromWM;sol-x> sol-wm => x*
     ; ( <is-subtype-traverse(!CEqual(<Fst>,<Snd>,pos)
                             ,!CSubType(<Fst>,<Snd>,pos)
                             ,!CSubType(<Snd>,<Fst>,pos)
                             ,id|x*);Snd> (ty1,ty2) => c*
       < !(sol-wm,c*)
       + !(<add-error(|(pos,$[[<pp-Analysis-string> ty1] is not a subtype of [<pp-Analysis-string> ty2]]))> sol-wm, [])
       ) => res

  solve-constraint: (CLubType(ty,ty1@TApp(tc1,_),ty2@TApp(tc2,_),pos),sol-wm) -> [res]
  where <is-ground> (ty1,ty2)
  with <fromWM;sol-x> sol-wm => x*
  where <all-tcs;map(<lookup> (<id>, x*))> (ty1,ty2)
  with ( <lub(|x*)> (ty1,ty2) => ty'
       < !(sol-wm,[CEqual(ty,ty',pos)])
       + !(<add-error(|(pos,$[Types [<pp-Analysis-string> ty1] and [<pp-Analysis-string> ty2] have no least upper bound.]))> sol-wm, [])
       ) => res

rules

  unsolved-error: FSubType(ty1,ty2,pos) -> (pos,msg)
  with msg := $[Could not set [<pp-Analysis-string> ty1] subtype of [<pp-Analysis-string> ty2]]

  unsolved-error: CSubType(ty1,ty2,pos) -> (pos,msg)
  with msg := $[Could not determine if [<pp-Analysis-string> ty1] subtype of [<pp-Analysis-string> ty2]]
