module libanalysis2/analysis

imports
  src-gen/signatures/libanalysis2/-
  libanalysis2/extraction/-
  libanalysis2/positioning/-
  libanalysis2/unification/-
  libanalysis2/namebinding/-
  libanalysis2/subtyping/-
  libanalysis2/substitution/-
  libanalysis2/solver/-
  libanalysis2/prelude/-
  libanalysis2/pp

rules

  analyse: desugared-ast -> ( (analysed-ast, errors*, warnings*, notes*)
                            , [ ("constraints",c*)
                              , ("scopegraph",g)
                              , ("resolution",pr*)
                              , ("solutions", sol*)
                              ])
  with
    (annotated-ast,c*) := <extract-constraints> desugared-ast
  ; sol-i := <initial-solution>
  ; [(sol-wm1,c1*)] := <solve-constraints-phase1> (sol-i,c*)
  ; g := <fromWM;sol-g> sol-wm1
  ; pr* := <resolve-all> g
  ; r* := <filterv(fromP;Hd)> pr*
  ; <solve-constraints-phase2;map(postprocess-errors)> (sol-wm1,c1*) => sol-wm*
  ; sol* := <map( ![ ("final-scopegraph", <fromWM;sol-g>)
                   , ("resolution", <fromWM;sol-r>)
                   , ("sub-types", <fromWM;sol-x>)
                   , ("pos-types", <fromWM;sol-p>)
                   , ("subst", <fromWM;sol-s>)
                   , ("errors", <wm-errors>)
                   , ("warnings", <wm-warnings>)
                   , ("notes", <wm-notes>)
                   ]
                )> sol-wm*
  ; <partition(not(is-erronious))> sol-wm* => (good-wm*, bad-wm*)
  ; n := (None(),$[Found [<length> good-wm*] correct and [<length> bad-wm*] erronious solutions.])
  ; ( ( <Hd> good-wm* <+ <Hd> bad-wm* ) => sol-wm
    < <fromWM;sol-r> sol-wm => r'*
    ; resolved-ast := <apply-resolution(|<conc;mapv(Fst)> (r'*,r*))> annotated-ast
    ; <fromWM;sol-p;mapk(position-to-key)> sol-wm => p*
    ; typed-ast := <apply-types(|p*)> resolved-ast
    ; analysed-ast := typed-ast
    ; errors* := <wm-errors;mapv(xmlencode)> sol-wm
    ; warnings* := <wm-warnings;mapv(xmlencode)> sol-wm
    ; notes* := [n,<wm-notes;mapv(xmlencode)> sol-wm]
    + analysed-ast := <apply-resolution(|<mapv(Fst)> r*)> annotated-ast
    ; errors* := [(None(),"Error during analysis")]
    ; warnings* := []
    ; notes* := [n]
    )

  get-editor-analysis = Fst
  
  get-debug-analysis = Snd

rules
  
  pp-analysis: [
    ("constraints",c*)
  , ("scopegraph",g)
  , ("resolution",r)
  , ("solutions", sol*)
  ] -> [
    ("constraints",<filter(not(irrelevant-constraint));map(pp-Analysis-string)> c*)
  , ("scopegraph", <pp-Graph> g)
  , ("resolution", <pp-Resolution> r)
  , ("solutions", <map(pp-analysis-solution)> sol*)
  ]

  pp-analysis-solution: [
    ("final-scopegraph", g)
  , ("resolution", r*)
  , ("sub-types", x*)
  , ("pos-types", p*)
  , ("subst", s*)
  , ("errors", e*)
  , ("warnings", w*)
  , ("notes", n*)
  ] -> [
    ("final-scopegraph", <pp-Graph> g)
  , ("resolution", <map((pp-Analysis-string,(pp-Analysis-string,map(pp-Analysis-string))))> r*)
  , ("sub-types", <pp-SubtypeRelation> x*)
  , ("pos-types", <filter(not(irrelevant-pos));map((pp-Analysis-string,pp-Analysis-string))> p*)
  , ("subst", <map((pp-Analysis-string,pp-Analysis-string))> s*)
  , ("errors", <map((pp-Analysis-string,id))> e*)
  , ("warnings", <map((pp-Analysis-string,id))> w*)
  , ("notes", <map((pp-Analysis-string,id))> n*)
  ]
 
  irrelevant-constraint = fail
  irrelevant-pos = fail
