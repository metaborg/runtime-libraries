module libanalysis2/solver/typechecking

imports
  src-gen/signatures/libanalysis2/-
  libanalysis2/abstract-syntax/-
  libanalysis2/substitution/-
  libanalysis2/namebinding/-
  libanalysis2/typechecking/-
  libanalysis2/solver/-
  libanalysis2/prelude/-
  libanalysis2/pp

rules
 
  solve-subtype-fact: (f@FSubType(tyd1@TDef(tc1,_),ty2,pos),sol-wm) -> [(sol-wm',[])]
  where <is-ground> (tyd1,ty2)
      ; <fromWM;sol-x> sol-wm => x*
      ; <build-subtype-relation(|x*)> (tyd1,ty2) => sr
  with ( <lookup> (tc1, x*)
       < <add-error(|(pos,$[Duplicate fact [<pp-Analysis-string> f]]))> sol-wm
       + <fmap(<sol-set-x(|sr)> (tc1,<id>))> sol-wm
       ) => sol-wm'

rules

  solve-eqtype-constraint: (CEqType(ty1,ty2,pos),sol-wm) -> [(sol-wm',[])]
  with <unifyt(|pos)> (ty1,ty2) => s-wm
     ; <sol-wm-apply-s(|pos)> (s-wm,sol-wm) => sol-wm'

  solve-eqtype-constraint: (CLubType(ty,ty1@TApp(tc1,_),ty2@TApp(tc2,_),pos),sol-wm) -> [res]
  where <is-ground> (ty1,ty2)
      ; <fromWM;sol-x> sol-wm => x*
      ; <all-tcs;map(<lookup> (<id>, x*))> (ty1,ty2)
  with ( <lub(|x*)> (ty1,ty2) => ty'
       < !(sol-wm,[CEqType(ty,ty',pos)])
       + !(<add-error(|(pos,$[Types [<pp-Analysis-string> ty1] and [<pp-Analysis-string> ty2] have no least upper bound.]))> sol-wm, [])
       ) => res

rules

  check-subtype-constraint: (CSubType(ty1,ty2,pos),sol-wm) -> [res]
  where <not(is-type-var)> ty1
      ; <not(is-type-var)> ty2
  with <fromWM;sol-x> sol-wm => x*
  	 ; ( <is-subtype-traverse(!CEqType(<Fst>,<Snd>,pos)
  	                         ,!CSubType(<Fst>,<Snd>,pos)
  	                         ,!CSubType(<Snd>,<Fst>,pos)
  	                         ,id|x*);Snd> (ty1,ty2) => c*
       < !(sol-wm,c*)
       + !(<add-error(|(pos,$[[<pp-Analysis-string> ty1] is not a subtype of [<pp-Analysis-string> ty2]]))> sol-wm, [])
  	   ) => res

rules

  postprocess-bounds: (sol-wm,c*) -> sol-wm'
  with <fromWM;sol-p> sol-wm => p*
     ; <fromWM;sol-lb;partitionv(is-ground)> sol-wm => (s*, lb'*)
     ; <fmap(sol-with-lb(|lb'*))> sol-wm
     ; <sol-wm-apply-s(|None())> (<pureWM> s*,<id>) => sol-wm'
