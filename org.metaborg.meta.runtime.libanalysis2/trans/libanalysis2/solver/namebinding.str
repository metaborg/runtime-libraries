module libanalysis2/solver/namebinding

imports
  
  src-gen/signatures/libanalysis2/-
  libanalysis2/substitution/-
  libanalysis2/namebinding/-
  libanalysis2/typechecking/-
  libanalysis2/solver/-
  libanalysis2/prelude/-
  libanalysis2/pp

rules
 
  solve-namebinding-fact: (FDecl(d,s),sol-wm)     -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-decl> (g,s,d) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FRef(r,s),sol-wm)      -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-ref> (g,s,r) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FImportR(r,l,s),sol-wm)  -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-r-import> (g,s,(r,l)) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FImportS(s',l,s),sol-wm) -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-s-import> (g,s,(s',l)) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FParent(s,p),sol-wm)   -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-parent> (g,s,p) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FAssoc(d,s),sol-wm)    -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-assoc> (g,d,s) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

rules

  solve-namebinding-constraint: (CResolves(r,l,d,pos),sol-wm) -> [(sol-wm'',[])]
  where <fromWM;sol-r> sol-wm => r*
      ; <lookup> (r,r*) => (d',l')
  with <unify-wm(|pos)> (d,d') => s-wm
     ; <sol-wm-apply-s(|pos)> (s-wm,sol-wm) => sol-wm'
     ; <unify-wm(|pos)> (l,l') => s-wm'
     ; <sol-wm-apply-s(|pos)> (s-wm',sol-wm') => sol-wm''

  solve-namebinding-constraint: (CResolves(r,l,d,pos),sol-wm) -> res*
  where <fromWM;sol-r> sol-wm => r*
      ; <not(lookup)> (r,r*)
      ; <resolve> (r, <fromWM;sol-g> sol-wm) => Total(dl*@[_|_])
  with <map(solve-namebinding-constraint-step(|r,l,d,pos,sol-wm))> dl* => res*

  solve-namebinding-constraint-step(|r,l,d,pos,sol-wm): (d',l') -> (sol-wm''',[])
  with <fmap(sol-set-r(|r,(d',l')))> sol-wm => sol-wm'
     ; <unify-wm(|pos)> (d,d') => s-wm
     ; <sol-wm-apply-s(|pos)> (s-wm,sol-wm') => sol-wm''
     ; <unify-wm(|pos)> (l,l') => s-wm'
     ; <sol-wm-apply-s(|pos)> (s-wm',sol-wm'') => sol-wm'''

  solve-namebinding-constraint: (CAssoc(d,s,pos),sol-wm) -> [(sol-wm',[])]
  where <is-ground> d
      ; <fromWM;sol-g> sol-wm => g
      ; <G-assoc> (g,d) => s'
  with <unify-wm(|pos)> (s,s') => s-wm
     ; <sol-wm-apply-s(|pos)> (s-wm,sol-wm) => sol-wm'
 
rules

  is-var: t -> t
  where <is-decl-var> t

  is-decl-var: Var(_) -> <id>
