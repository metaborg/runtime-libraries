module libanalysis2/solver/solver

imports
  src-gen/signatures/libanalysis2/-
  runtime/editor/annotations
  runtime/editor/origins
  runtime/task/messages
  libanalysis2/prelude/-
  libanalysis2/pp
  libanalysis2/solver/-
  libanalysis2/unification/functions

rules
	
  solve-fact = fail
  
  solve-constraint = fail	
	
rules

  initial-solution = sol-new;pureWM

  solve-constraints-phase1: c* -> s
  with
    s := <csolve( solve-specialise
                , ( solve-fact
                 <+ solve-trivial-constraints
                  )
                )> c*

  solve-constraints-phase2: c* -> s
  with
    s := <csolve( solve-specialise
                , ( solve-constraint
                 <+ solve-trivial-constraints
                  )
                )> c*

  solve-specialise: (sol-wm,c) -> c'
  with <fromWM;sol-s> sol-wm => s*
     ; <fromWM;sol-x> sol-wm => x*
     ; <S-apply(is-var);reduce-ops(|x*)> (s*,c) => c'

rules
 
  solve-trivial-constraints: (CTrue(),sol-wm) -> [(sol-wm,[])]
  solve-trivial-constraints: (CAndStar(c*),sol-wm) -> [(sol-wm,c*)]

rules
 
  debug-solve(s): i@(c,sol-wm) -> o*
    where s => o*
    with <debug> $[solve [<pp-Constraint> c]]
       ; <map(Snd;map(pp-Constraint);debug(!"--> "))> o*
