module libanalysis2/namebinding/dot

imports
  signatures/libanalysis2/-
  libanalysis2/namebinding/-
  libanalysis2/pp
 
rules

  sg-dot: G(s*,a*) -> $[
  	digraph { 
      rankdir=BT
  	  [s-stmts] 
  	  [a-stmts] 
  	}
  ]
  with <stmts(sg-dot-scope)> s* => s-stmts
     ; <stmts(sg-dot-arrow(|"empty"))> a* => a-stmts
     

  sg-dot-scope: (s,S(p,d*,r*,ir*,is*)) -> 
    $[[s-node]
      [d-nodes]
      [d-arrows]
      [r-nodes]
      [r-arrows]
      [p-arrow]
      [ir-nodes]
      [ir-arrows]
      [is-arrows]
      [scope-var-nodes]
     ]
  with <sg-dot-node(|"circle")> s => s-node
     ; <sg-dot-parent(|s)> p => p-arrow
     ; <reverse; stmts(sg-dot-node(|"square"))> d* => d-nodes
     ; <reverse; stmts(sg-dot-arrow-from(|s,"normal",1,"true"))> d* => d-arrows
     ; <reverse; stmts(sg-dot-node(|"square"))> r* => r-nodes
     ; <reverse; stmts(sg-dot-arrow-to(|s,"normal",1,"true"))> r* => r-arrows
     ; <reverse; stmts(sg-dot-node(|"square"))> ir* => ir-nodes
     ; <reverse; stmts(sg-dot-arrow-from(|s,"empty"))> ir* => ir-arrows
     ; <reverse; stmts(sg-dot-arrow-from(|s,"empty"))> is* => is-arrows
     ; <collect(?ScopeVar(_)); stmts(sg-dot-node(|"circle"))> is* => scope-var-nodes


  sg-dot-parent(|s): NoneScope() -> ""
  sg-dot-parent(|s): SomeScope(p) -> <sg-dot-arrow-from(|s,"normal")> p

  sg-dot-node(|shape): n -> ${{<sg-dot-id> n} [shape="{shape}",label={<sg-dot-lbl> n}];}

  sg-dot-arrow(|style): (src,dst) -> ${{<sg-dot-id> src} -> {<sg-dot-id> dst}[arrowhead="{style}",weight=1,constraint=true];}
  sg-dot-arrow-to(|dst,style): src -> ${{<sg-dot-id> src} -> {<sg-dot-id> dst}[arrowhead="{style}",weight=1,constraint=true];}
  sg-dot-arrow-to(|dst,style,weight,cons): src -> ${{<sg-dot-id> src} -> {<sg-dot-id> dst}[arrowhead="{style}",weight={weight},constraint={cons}];}
  
  sg-dot-arrow-from(|src,style): dst -> ${{<sg-dot-id> src} -> {<sg-dot-id> dst}[arrowhead="{style}",weight=1,constraint=true];}
  sg-dot-arrow-from(|src,style,weight,cons): dst -> ${{<sg-dot-id> src} -> {<sg-dot-id> dst}[arrowhead="{style}",weight={weight},constraint={cons}];}

  sg-dot-id: Scope(s) -> $["[s]"]
  sg-dot-lbl: Scope(s) -> $[<[s]>]

  sg-dot-id: ScopeVar(s) -> $["s[s]?"]
  sg-dot-lbl: ScopeVar(s) -> $[<&sigmaf;<sub>[s]</sub>>]

  sg-dot-id: DeclId(ns,n,i) -> ${"{n}_{i}"}
  sg-dot-lbl: DeclId(ns,n,i) -> ${<{n}<sub>{i}</sub>>}

  sg-dot-id: RefId(ns,n,i) -> ${"{n}_{i}"}
  sg-dot-lbl: RefId(ns,n,i) -> ${<{n}<sub>{i}</sub>>}

  stmts(s) = map(s); separate-by(|"\n"); concat-strings
  
  
