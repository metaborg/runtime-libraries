module libanalysis2/namebinding/resolution

imports
  src-gen/signatures/libanalysis2/-
  libanalysis2/namebinding/-
  libanalysis2/pp
  libanalysis2/prelude/-

rules

  // resolve-all :: Graph -> [(Name * Partial([Decl]))]
  resolve-all = ?g ; G-refs ; map(!(<id>,<resolve(|g,[])>))

  // resolve :: Ref * Graph -> Partial([Decl])
  resolve = ?(<id>,g) ; resolve(|g,[])

rules // resolution internal

  // resolve :: Ref -> Partial [Decl]
  resolve(|g,ir*) =
    ?r
  ; <G-scope> (g,r) => s
  ; <resolve_v(|g,[r|ir*],[])> (r,s)

  // resolve_v :: Ref * Scope -> Partial [Decl]
  resolve_v(|g,ir*,s*) =
    shadows( resolve_l(|g,ir*,s*)
           , resolve_p(|g,ir*,s*)
           )

  // resolve_v :: Ref * Scope -> Partial([Decl])
  resolve_l(|g,ir*,s*) =
    shadows ( resolve_d(|g,ir*,s*)
            , resolve_i(|g,ir*,s*)
            )

  // resolve_v :: Ref * Scope -> Partial [Decl]
  resolve_d(|g,ir*,s*) =
    ?(r,s)
  ; ( <elem> (s,s*)
    < <pureP> []
    + <G-decls;match-all(|r);pureP> (g,s)
    )

  // resolve_v :: Ref * Scope -> Partial [Decl]
  resolve_i(|g,ir*,s*) =
    ?(r,s)
  ; ( <elem> (s,s*)
    < <pureP> []
    + <G-r-imports> (g,s)
    ; <diff> (<id>,ir*)
    ; map(resolve(|g,ir*))
    ; sequenceP
    ; fmap( unions
          ; filter(<G-assoc> (g,<id>))
          ; <union> (<G-s-imports>  (g,s), <id>)
          ; <diff> (<id>,s*)
          ; filterToP(?Scope(_))
          )
    ; join
    ; fmap( <diff> (<id>,s*)
          ; map(<resolve_l(|g,ir*,[s|s*])> (r,<id>))
          ; sequenceP
          ; fmap( unions )
          )
    ; join
    )

  // resolve_p :: Ref * Scope -> Partial [Decl]
  resolve_p(|g,ir*,s*) = 
    ?(r,s)
  ; ( <elem> (s,s*)
    < <pureP> []
    + ( <G-parent> (g,s)
      < <resolve_v(|g,ir*,[s|s*])> (r,<id>)
      + <pureP> []
      )
    )

  // shadows(s1: (Ref * Scope) -> Partial [Decl], s2: (Ref * Scope) -> Partial [Decl]) :: (Ref * Scope) -> Partial [Decl]
  shadows(s1,s2) = ?(r,s) ; <s1> (r,s) ; ( ?Total([]) < <s2> (r,s) + id )

  // match(|r: Ref) :: [Decl] -> [Decl]
  match-all(|r) = filter(if(<match> (r,<id>)))

  // match :: (Ref,Decl) -?> (Ref,Decl)
  match = ?(RefId(ns,n,_),DeclId(ns,n,_))
