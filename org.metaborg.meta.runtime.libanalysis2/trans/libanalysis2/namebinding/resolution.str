module libanalysis2/namebinding/resolution

imports
  src-gen/signatures/libanalysis2/-
  libanalysis2/namebinding/-
  libanalysis2/pp
  libanalysis2/prelude/-

signature
  // types
  //   Atom = (Ns,String)
  //   Resolution = Partial [(Atom,Partial [(Decl,[Label])])]

rules

  // resolve-all(|Graph) :: [(Ref,Partial [(Decl,[Label])])]
  resolve-all =
    ?g
  ; G-refs
  ; map(!(<id>,<resolve(|g)>))

  // resolve(|Graph) :: Ref -> Partial [(Decl,[Label])]
  resolve(|g) = resolve(|g,[])

rules // resolution internal

  // resolve :: Ref -> Partial [(Decl,[Label])]
  resolve(|g,ir*) =
    ?r
  ; <G-scope> (g,r) // :: Scope
  ; env_v(|g,[r|ir*],[]) // :: Partial [(Atom,Partial [(Decl,[Label])])]
  ; ( <lookup> (<atom> r, <fromP>) // :: Partial [(Decl,[Label])]
   <+ fmap(![])
    ) // :: Partial [(Decl,[Label])]

  // env_v(|Graph,[Ref],[Scope]) :: Scope -> Partial [(Atom,Partial [(Decl,[Label])])]
  env_v(|g,ir*,s*) =
    <shadow> ( <env_l(|g,ir*,s*)>
             , <env_p(|g,ir*,s*)>
             )

  // env_l(|Graph,[Ref],[Scope]) :: Scope -> Partial [(Atom,Partial [(Decl,[Label])])]
  env_l(|g,ir*,s*) =
    <shadow> ( <env_d(|g,ir*,s*)>
             , <env_i(|g,ir*,s*)>
             )

  // env_d(|Graph,[Ref],[Scope]) :: Scope -> Partial [(Atom,Partial [(Decl,[Label])])]
  env_d(|g,ir*,s*) =
    ?s
  ; ( <elem> (s,s*)
    < []
    + <G-decls> (g,s) // :: [Decl]
    ; group(atom) // :: [(Atom,[Decl])]
    ; mapv(map(!(<id>,[]));pureP) // :: [(Atom,Partial [(Decl,[Label])])]
    )
  ; pureP // :: Partial [(Atom,Partial [(Decl,[Label])])]

  // env_i(|Graph,[Ref],[Scope]) :: Scope -> Partial [(Atom,Partial [(Decl,[Label])])]
  env_i(|g,ir*,s*) =
    ?s
  ; ( <elem> (s,s*)
    < <pureP> []
    + <G-r-imports> (g,s) // :: [(Ref,Label)]
    ; filter(not(<elem> (<Fst>,ir*))) // :: [(Ref,Label)]
    ; map(resolve_i_r2s(|g,ir*)) // :: [Partial [(Decl,Label)]]
    ; sequenceP // :: Partial [[(Decl,Label)]] | outer partial
    ; fmap( unions // :: [(Decl,Label)]
          ; filter((<G-assoc> (g,<id>),id)) // :: [(Scope,Label)]
          ; <union> ( <id> // :: [(Scope,Label)]
                    , <G-s-imports>  (g,s) // :: [(Scope,Label)]
                    ) // :: [(Scope,Label)]
          ; filter(not(<elem> (<Fst>,s*))) // :: [(Scope,Label)]
          ; map( ?(Scope(_),_)
               < env_i_l(|g,ir*,[s|s*]) // :: Partial [(Atom,Partial [(Decl,[Label])])]
               + !Partial([]) // :: Partial [(Atom,Partial [(Decl,[Label])])]
               ) // :: [Partial [(Atom,Partial [(Decl,[Label])])]]
          ; sequenceP // :: Partial [[(Atom,Partial [(Decl,[Label])])]]
          ; fmap( foldr(![],merge(union,mplus(union))) // :: [(Atom,Partial [(Decl,[Label])])]
                ) // :: Partial [(Atom,Partial [(Decl,[Label])])]
          ) // :: Partial (Partial [(Atom,Partial [(Decl,[Label])])])
    ; join // :: Partial [(Atom,Partial [(Decl,[Label])])]
    )

  // resolve_i_r2s(|Graph,[Ref]) :: (Ref,Label) -> Partial [(Decl,Label)]
  resolve_i_r2s(|g,ir*) =
    ?(r,l)
  ; <resolve(|g,ir*)> r // :: Partial [(Decl,[Label])]
  ; fmap(map(!(<Fst>,l))) // :: Partial([(Decl,Label)])

  // env_i_l(|Graph,[Ref],[Scope]) :: (Scope,Label) -> Partial [(Atom,Partial [(Decl,[Label])])]
  env_i_l(|g,ir*,s*) =
    ?(s,l)
  ; <env_l(|g,ir*,s*)> s // :: Partial [(Atom,Partial [(Decl,[Label])])]
  ; fmap(map((id,fmap(map((id,![l|<id>])))))) // :: Partial [(Atom,Partial [(Decl,[Label])])]

  // env_p(|Graph,[Ref],[Scope]) :: Scope -> Partial [(Atom,Partial [(Decl,[Label])])]
  env_p(|g,ir*,s*) =
    ?s
  ; ( <elem> (s,s*)
    < <pureP> []
    + ( <G-parent> (g,s)
      < env_v(|g,ir*,[s|s*])
      + <pureP> []
      )
    )

  // shadow :: (Partial [(Atom,Partial [(Decl,[Label])])], Partial [(Atom,Partial [(Decl,[Label])])]) -> Partial [(Atom,Partial [(Decl,[Label])])]
  shadow =
    twrapP // :: Partial ([(Atom,Partial [(Decl,[Label])])], [(Atom,Partial [(Decl,[Label])])])
  ; fmap(merge(union,Fst)) // :: Partial [(Atom,Partial [(Decl,[Label])])]

  atom: RefId(ns,n,_) -> <strip-annos> (ns, n)
  atom: DeclId(ns,n,_) -> <strip-annos> (ns, n)

rules
 
  pp-Resolution = map((pp-Analysis-string,fmap(map((pp-Analysis-string,map(pp-Analysis-string))))))
