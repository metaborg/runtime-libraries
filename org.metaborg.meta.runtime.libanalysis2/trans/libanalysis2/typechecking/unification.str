module libanalysis2/typechecking/unification

imports
  signatures/libanalysis2/-
  libanalysis2/substitution/-
  libanalysis2/namebinding/-
  libanalysis2/typechecking/-
  libanalysis2/prelude/-
  libanalysis2/pp

rules

  is-var: t -> t
  where <is-type-var> t

  is-type-var: TVar(_) -> <id>

  type-vars = collect-all(is-type-var)

rules

  unifyt(|pos): (ty1,ty2) -> <unifyt;pureWM>
  unifyt(|pos): (ty1,ty2) -> <pureWM;add-error(|(pos,msg))> []
  with msg := $[Could not unify types [<pp-Analysis-string> ty1] and [<pp-Analysis-string> ty2]]

  unifyt: (ty,ty) -> []
  unifyt: (tv@TVar(_),ty) -> [(tv,ty)]
  unifyt: (ty,tv@TVar(_)) -> [(tv,ty)]
  unifyt: (ty1@TApp(tc1,a1*),ty2@TApp(tc2,a2*)) -> s
  where <unifytc> (tc1,tc2) => s'
      ; <zip;S-foldr(!s',unifyt)> (a1*,a2*) => s

  // implement this yourself for other type constructors
  unifytc: (tc,tc) -> []
