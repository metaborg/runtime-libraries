module libanalysis2/Analysis

imports

  libanalysis2/Common

sorts

  Scope
  OptionScope
  DeclId
  RefId
  Pos
  Namespace

context-free syntax

  Scope.Global              = <global>
  Scope.Scope               = <scope(<Int>)>
  Scope.ScopeVar            = <s<Int>>

  OptionScope.NoneScope     = <->
  OptionScope.SomeScope     = <<Scope>>

  DeclId.DeclId             = <decl(<Namespace>,<String>,<Pos>)>
  DeclId.DeclVar            = <d<Int>>

  RefId.RefId               = <ref(<Namespace>,<String>,<Pos>)>

  Pos.Pos                   = <<String>@(<String>,<Int>,<Int>,<Int>,<Int>)>
  Pos.POfDecl               = <posOf(<DeclId>)>
  Pos.POfRef                = <posOf(<RefId>)>

  Namespace.None            = <->

sorts

  Type
  TypeDef
  TypeArg
  Variance
  TypeCon

context-free syntax

  Type.TApp                 = <<TypeCon>[<{Type ","}*>]>
  Type.TVar                 = <t<Int>>

  TypeDef.TDef              = <<TypeCon>[<{TypeArg ","}*>]>
  TypeArg.TArg              = <<Variance><Type>>

  Variance.Invariant        = <=>
  Variance.Covariant        = <+>
  Variance.Contravariant    = <->

  TypeCon                   = NotImplemented

sorts

  Constraint

context-free syntax

  Constraint.CTrue          = <T>
  Constraint.CAndStar       = <<{Constraint "/\\"}*>> {longest-match}

  Constraint.FDecl          = <<DeclId> in <Scope>>
  Constraint.FRef           = <<RefId> in <Scope>>
  Constraint.FImportR       = <import <RefId><Term> in <Scope>>
  Constraint.FImportS       = <import <Scope><Term> in <Scope>>
  Constraint.FParent        = <parent(<Scope>) is <OptionScope>>
  Constraint.FAssoc         = <<DeclId> with <Scope>>

  Constraint.FSubType       = [[TypeDef] <: [Type] [Pos]]

  Constraint.CResolves      = [[RefId] |--> [DeclId] [Pos]]
  Constraint.CEqType        = [[Type] == [Type] [Pos]]
  Constraint.CLubType       = [[Type] == lub([Type],[Type]) [Pos]]
  Constraint.CSubType       = [[Type] <= [Type] [Pos]]
  Constraint.CAssoc         = [[DeclId] ~~> [Scope] [Pos]]
  Constraint.CTypeOf        = <<Pos> : <Type> <Pos>>


lexical syntax

  // this needs to go at the end, or prettyprint-Analysis-string will try this
  // early and always use the generic Term printer instead of the grammar
  // prettyprinter for all terms
  Term           = ~[]+