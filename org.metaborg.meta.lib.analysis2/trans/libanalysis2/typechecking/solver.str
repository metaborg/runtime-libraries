module libanalysis2/typechecking/solver

imports
  signatures/libanalysis2/equality/-
  signatures/libanalysis2/typechecking/-
  libanalysis2/solver/-
  libanalysis2/typechecking/-
  libanalysis2/prelude/-
  libanalysis2/pp

rules
 
  solve-constraint: (f@FSubType(tyd@TDef(tc,_),ty,msginfo),sol-wm) -> [(sol-wm',[])]
  where <is-ground> (tyd,ty)
      ; <fromWM;sol-x> sol-wm => x*
      ; <build-subtype-relation(|x*)> (tyd,ty) => sr
  with ( <lookup> (tc, x*)
       < msg := $[Duplicate fact [<pp-Constraint> f]]
       ; <add-message(|msginfo,msg)> sol-wm
       + <fmap(<sol-set-x(|sr)> (tc,<id>))> sol-wm
       ) => sol-wm'

rules

  solve-constraint: (CSubType(TList(ty1*),TList(ty2*),msginfo),sol-wm) -> [res]
  where <is-list> ty1*
      ; <is-list> ty2*
  with ( <(length,length);eq> (ty1*,ty2*)
       < msg := [ty1*," not a subtype of ",ty2*]
       ; msginfo' := <default-message(|msg)> msginfo
       ; !(sol-wm, <zip;map(!CSubType(<Fst>,<Snd>,msginfo'))> (ty1*,ty2*))
       + msg := ["Cannot check subtyping for lists [",ty1*,"] and [",ty2*,"] of different length."]
       ; !(<add-message(|msginfo,msg)> sol-wm, [])
       ) => res

  solve-constraint: (CSubType(ty1@TApp(_,_),ty2@TApp(_,_),msginfo),sol-wm) -> [res]
  where <is-ground> (ty1,ty2)
  with <fromWM;sol-x> sol-wm => x*
     ; msg := [ty1," is not a subtype of ",ty2]
     ; msginfo' := <default-message(|msg)> msginfo
     ; ( <is-subtype-traverse(!CEqual(<Fst>,<Snd>,msginfo')
                             ,!CSubType(<Fst>,<Snd>,msginfo')
                             ,!CSubType(<Snd>,<Fst>,msginfo')
                             ,id|x*);Snd> (ty1,ty2) => c*
       < !(sol-wm,c*)
       + !(<add-message(|msginfo,msg)> sol-wm, [])
       ) => res

  solve-constraint: (CLubType(ty,ty1@TApp(tc1,_),ty2@TApp(tc2,_),msginfo),sol-wm) -> [res]
  where <is-ground> (ty1,ty2)
  with <fromWM;sol-x> sol-wm => x*
  where <all-tcs;map(<lookup> (<id>, x*))> (ty1,ty2)
  with msg := ["Types ",ty1," and ",ty2," have no least upper bound."]
     ; ( <lub(|x*)> (ty1,ty2) => ty'
       < !(sol-wm,[CEqual(ty,ty',<default-message(|msg)> msginfo)])
       + !(<add-message(|msginfo,msg)> sol-wm, [])
       ) => res

rules

  constraint-priority: FSubType(_,_,_) -> 5
  constraint-priority: CSubType(_,_,_) -> 6
  constraint-priority: CLubType(_,_,_,_) -> 6

rules

  unsolved-message: FSubType(ty1,ty2,msginfo) -> <default-message(|msg,"Unsolved: ")> msginfo
  with msg := ["Could not set ",ty1," subtype of ",ty2]

  unsolved-message: CSubType(ty1,ty2,msginfo) -> <default-message(|msg,"Unsolved: ")> msginfo
  with msg := ["Could not determine if ",ty1," subtype of ",ty2]
