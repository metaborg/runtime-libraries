module libanalysis2/pp/overrides

imports
  libstratego-gpp
  runtime/tmpl/pp
  signatures/libanalysis2/positioning/-
  signatures/libanalysis2/typechecking/-
  pp/libanalysis2/-
  pp/libanalysis2/namebinding/-
  pp/libanalysis2/positioning/-
  pp/libanalysis2/solver/-
  pp/libanalysis2/typechecking/-
  stratego/metaborg

rules

  prettyprint-aterm: c#(a*) -> [ H( [SOpt(HS(),"0")]
                                  , [S(c),S("("),a',S(")")] ) ]
    with a' := <pp-H-list(prettyprint-Term|",")> a*

  // allow printing of actual Ints as well
  prettyprint-Int: i -> [S(<int-to-string> i)]
    where is-int

  // easy list printing
  prettyprint-list(pp): t -> [ H( [SOpt(HS(),"0")]
                                , [S("["),t',S("]")] ) ]
    where is-list
    with t' := <pp-H-list(pp|",")> t

  // easy tuple printing
  prettyprint-tuple(pp1,pp2): (t1,t2) -> [ H( [SOpt(HS(),"0")]
                                            , [S("("),t1',S(","),t2',S(")")] ) ]
    with t1' := <pp-one-Z(pp1)> t1
    with t2' := <pp-one-Z(pp2)> t2

  // omit brackets if no type arguments are present
  prettyprint-Type:
    TApp(tc, []) -> [ H( [SOpt(HS(), "0")]
                      , [ tc' ] ) ]
    with tc' := <pp-one-Z(prettyprint-TypeCon)> tc

  // print origins more compactly
  prettyprint-ASTPos:
    Pos(key, t) ->
      [ H([SOpt(HS(),"0")], [ key', pos' ] ) ]
    with key'    := <pp-one-Z(prettyprint-Int)> key
    with pos'    := <pp-one-Z(prettyprint-Origin)> t

  prettyprint-Origin:
    t -> [ H([SOpt(HS(),"0")], [ S("@("), S(line'), S(","), S(column'), S(")") ] ) ]
    with line'   := <(origin-line;inc<+!-1);int-to-string> t
    with column' := <(origin-column;inc<+!-1);int-to-string> t

  prettyprint-String:
    t -> [ H( [SOpt(HS(), "0")]
            , [S("[[...]]")]
            )
         ]
    where is-SDF-placeholder

rules

  check-Int = is-int

  check-Term = id

  check-list(s) = map(s)

rules

  prettyprint-Term = prettyprint-String
  prettyprint-Term = prettyprint-Int
  prettyprint-Term = prettyprint-DeclId
  prettyprint-Term = prettyprint-RefId
  prettyprint-Term = prettyprint-Name
  prettyprint-Term = prettyprint-ScopeId
  prettyprint-Term = prettyprint-Pos
  prettyprint-Term = prettyprint-Var
  prettyprint-Term = prettyprint-Constraint
  prettyprint-Term = prettyprint-Names
  prettyprint-Term = prettyprint-Type
  prettyprint-Term = prettyprint-TypeDef
  prettyprint-Term = prettyprint-TypeArg
  prettyprint-Term = prettyprint-TypeCon
  prettyprint-Term = prettyprint-Message
  prettyprint-Term = prettyprint-MessageKind
  prettyprint-Term = prettyprint-Placeholder
  // catch all cases
  prettyprint-Term = prettyprint-list(prettyprint-Term)
  prettyprint-Term = prettyprint-aterm
