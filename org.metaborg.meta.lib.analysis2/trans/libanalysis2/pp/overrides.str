module libanalysis2/pp/overrides

imports
  libstratego-gpp
  runtime/tmpl/pp
  signatures/libanalysis2/-
  pp/libanalysis2/-
  editor-common.generated

rules

  prettyprint-ATerm: t@c#(a*) -> [ H( [SOpt(HS(), "0")],
                                     [S(c),S("["),b,S("]")] ) ]
  where b := <pp-H-list(prettyprint-Term|",")> a*

  // allow printing of actual Ints as well
  prettyprint-Int: i -> [S(<int-to-string> i)]
  where is-int

  // easy list printing
  prettyprint-List(pp): t -> [ H( [SOpt(HS(), "0")],
                                  [S("["),b,S("]")] ) ]
  where is-list
  with b := <pp-H-list(pp|",")> t

  // print origins more compactly
  prettyprint-Pos:
    Pos(key, file, line, column, begin, end) ->
      [ H( [SOpt(HS(), "0")]
         , [ key', S("@("), line', S(","), column', S(")") ] ) ]
    with key'    := <pp-one-Z(prettyprint-Int)> key
    with line'   := <inc;pp-one-Z(prettyprint-Int)> line
    with column' := <inc;pp-one-Z(prettyprint-Int)> column

  prettyprint-TermPos:
    t -> [ H( [SOpt(HS(), "0")]
            , [ S("@("), S(line'), S(","), S(column'), S(")") ] ) ]
    with line'   := <(origin-line;inc<+!-1);int-to-string> t
    with column' := <(origin-column;inc<+!-1);int-to-string> t

rules

  prettyprint-Term = prettyprint-String
  prettyprint-Term = prettyprint-Int
  prettyprint-Term = prettyprint-DeclId
  prettyprint-Term = prettyprint-RefId
  prettyprint-Term = prettyprint-Atom
  prettyprint-Term = prettyprint-Scope
  prettyprint-Term = prettyprint-OptionScope
  prettyprint-Term = prettyprint-Pos
  prettyprint-Term = prettyprint-Var
  prettyprint-Term = prettyprint-Constraint
  prettyprint-Term = prettyprint-Type
  prettyprint-Term = prettyprint-TypeDef
  prettyprint-Term = prettyprint-TypeArg
  prettyprint-Term = prettyprint-TypeCon
  prettyprint-Term = prettyprint-Message
  prettyprint-Term = prettyprint-MessageKind
  // catch all cases
  prettyprint-Term = prettyprint-List(prettyprint-Term)
  prettyprint-Term = prettyprint-ATerm