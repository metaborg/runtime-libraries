module libanalysis2/namebinding/solver

imports
  
  libanalysis2/namebinding/-
  libanalysis2/prelude/-
  libanalysis2/solver/-
  libanalysis2/pp
  signatures/libanalysis2/-

rules
 
  solve-fact = solve-namebinding-fact 
 
  solve-namebinding-fact: (FParent(s,p),sol-wm)   -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-parent> (g,s,p) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FDecl(d,s),sol-wm) -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-decl> (g,s,d) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FRef(r,s),sol-wm) -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-ref> (g,s,r) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FImportR(r,l,s),sol-wm) -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-r-import> (g,s,(r,l)) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FImportS(s',l,s),sol-wm) -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-s-import> (g,s,(s',l)) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  solve-namebinding-fact: (FAssoc(d,s),sol-wm)    -> [(sol-wm',[])]
  with <fromWM;sol-g> sol-wm => g
     ; <G-with-assoc> (g,d,s) => g'
     ; <fmap(<sol-with-g> (g',<id>))> sol-wm => sol-wm'

  constraint-priority: FParent(_,_) -> 3
  constraint-priority: FDecl(_,_) -> 3
  constraint-priority: FRef(_,_) -> 3
  constraint-priority: FImportR(_,_,_) -> 3
  constraint-priority: FImportS(_,_,_) -> 3
  constraint-priority: FAssoc(_,_) -> 3

rules

  solve-constraint = solve-namebinding-constraint

  solve-namebinding-constraint: (CResolves(r,l,d,msginfo),sol-wm) -> [(sol-wm,c*)]
  where r* := <fromWM;sol-r> sol-wm
      ; (d',p) := <lookup> (r,r*)
      ; l' := <path-labels> p
  with msg := ["Unable to resolve ",r," to ",d]
     ; msginfo' := <default-message(|msg)> msginfo
     ; c* := [ CEqual(d,d',msginfo'),
               CEqual(l,l',msginfo')
             ]

  solve-namebinding-constraint: (CResolves(r,l,d,msginfo),sol-wm) -> res*
  where r* := <fromWM;sol-r> sol-wm
      ; <not(lookup)> (r,r*)
      ; g := <fromWM;sol-g> sol-wm
      ; dl*@[_|_] := <resolve(|g)> r
  with msg := ["Unable to resolve ",r," to ",d]
     ; msginfo' := <default-message(|msg)> msginfo
     ; <map(solve-namebinding-constraint-step(|r,l,d,msginfo',sol-wm))> dl* => res*

  solve-namebinding-constraint-step(|r,l,d,msginfo,sol-wm): (d',p) -> (sol-wm',c*)
  with <fmap(sol-set-r(|r,(d',p)))> sol-wm => sol-wm'
  with l' := <path-labels> p
  with c* := [ CEqual(d,d',msginfo)
             , CEqual(l,l',msginfo)
             ]
 
  solve-namebinding-constraint: (CAssoc(d,s,msginfo),sol-wm) -> [(sol-wm,c*)]
  where <is-ground> d
      ; g := <fromWM;sol-g> sol-wm
      ; s' := <G-assoc> (g,d)
  with msg := ["Cannot find scope ",s," associated with ",d]
     ; c* := [ CEqual(s,s',<default-message(|msg)> msginfo) ]
 
  solve-namebinding-constraint: (CDistinct(s,msginfo),sol-wm) -> [(sol-wm',[])]
  where <is-ground> s
      ; g := <sol-g> sol-wm
      ; d* := <G-decls;map(atom)> (g,s)
  with ( <dups> d* => d'*
       < msg := ["Duplicate declarations ",d'*]
       ; <add-message(|msginfo,msg)> sol-wm
       + !sol-wm
       ) => sol-wm'

  solve-namebinding-constraint: (CInit(s,msginfo),sol-wm) -> [(sol-wm',[])]
  where <is-ground> s
      ; g := <sol-g> sol-wm
      ; r* := <G-refs;map(atom)> (g,s)
      ; Total(d*) := <env(|g,[],[]);fmap(keys)> s
  with <isect> (r*,d*) => i*
     ; ( ?[]
       < !sol-wm
       + msg := ["Mismatch ",i*]
       ; <add-message(|msginfo,msg)> sol-wm
       ) => sol-wm'

rules

  constraint-priority: CAssoc(_,_,_) -> 4
  constraint-priority: CResolves(_,_,_,_) -> 4
  constraint-priority: CDistinct(_,_) -> 4
  constraint-priority: CInit(_,_) -> 4

rules
 
  unsolved-message: CResolves(r,l,d,msginfo) -> <default-message(|msg)> msginfo
  with msg := ["Cannot resolve ",r," to ",d]

  unsolved-message: CAssoc(d,s,msginfo) -> <default-message(|msg)> msginfo
  with msg := ["Cannot find associated scope ",s," of ",d]
