module libanalysis2/namebinding/resolution

imports
  libanalysis2/namebinding/scopegraph
  libanalysis2/pp
  libanalysis2/prelude/-
  signatures/libanalysis2/namebinding/-

signature

  // type Env = Partial [(Name,[(Decl,Path)])]

rules

  // resolve-all :: Graph -> [(Ref,[(Decl,Path)])]
  resolve-all =
    ?g
  ; G-refs
  ; filter(!(<id>,<resolve(|g)>))

  // resolve(|Graph) :: Ref -|-> [(Decl,Path)]
  resolve(|g) = resolve(|g,[])

rules // resolution internal

  // resolve :: Ref -|-> [(Decl,Path)]
  resolve(|g,ir*) =
    ?r
  ; ( <G-scope> (g,r) // :: Scope
   <+ <debug(!"ERROR: Cannot get scope for reference ");fail> r
    )
  ; env_v(|g,[r|ir*],[]) // :: Env
  ; ( <lookup> (<id-atom> r,<fromP>) // :: [(Decl,Path)]
   <+ fromTotal ; ![]
    ) // :: [(Decl,Path)]

  // env(|Graph,[Ref],[Scope]) :: Scope -> Env
  env_v(|g,ir*,s*) =
    with(dbg-res(|"env_v "))
  ; ?s
  ; ( <elem> (s,s*) < <pureP> []
  + <shadow> ( <env_l(|g,ir*,s*)>
             , <env_p(|g,ir*,s*)>
             )
  )
  ; with(dbg-res(pp-Env|"env_v "))

  // env_e(|Graph,[Ref],[Scope]) :: Scope -> Env
  env_l(|g,ir*,s*) =
    with(dbg-res(|"env_l "))
  ; ?s
  ; ( <elem> (s,s*) < <pureP> []
  + <shadow> ( <env_d(|g,ir*,s*)>
             , <env_i(|g,ir*,s*)>
             )
  )
  ; with(dbg-res(pp-Env|"env_l "))

  // env_d(|Graph,[Ref],[Scope]) :: Scope -> Env
  env_d(|g,ir*,s*) =
    with(dbg-res(|"env_d "))
  ; ?s
  ; <G-decls> (g,s) // :: [Decl]
  ; group(id-atom) // :: [(Name,[Decl])]
  ; mapv(map(!(<id>,[D(<id>)]))) // :: [(Name,[(Decl,Path)])]
  ; pureP // :: Env
  ; with(dbg-res(pp-Env|"env_d "))

  // env_i(|Graph,[Ref],[Scope]) :: Scope -> Env
  env_i(|g,ir*,s*) =
    with(dbg-res(|"env_i "))
  ; ?s
  ; ( <union> ( <env_i_is2s(|g)> s
              , <env_i_ir2s(|g,ir*)> s
              ) // :: [(Scope,Step)]
    < map(env_i_s2env(|g,ir*,[s|s*])) // :: [Partial [(Name,[(Decl,Path])]]
    ; sequenceP // :: Partial [[(Name,[(Decl,Path)])]]
    ; fmap( foldr(![],merge(union,union)) ) // :: Env
    + !Partial([])
    )
  ; with(dbg-res(pp-Env|"env_i "))

  // env_i_is2s(|Graph) :: Scope -|-> [(Scope,Step)]
  env_i_is2s(|g) =
    ?s
  ; <G-s-imports> (g,s) // :: [(Scope,Label)]
  ; map(!(<Fst;not(?Var(_))>,E(I(),<Fst>,<Snd>))) // :: [(Scope,Step)]

  // env_i_ir2s(|Graph,[Ref]) :: Scope -|-> [(Scope,Step)]
  env_i_ir2s(|g,ir*) =
    ?s
  ; <G-r-imports> (g,s) // :: [(Ref,Label)]
  ; filterk(not(<elem> (<id>,ir*))) // :: [(Ref,Label)]
  ; mapconcat(resolve_i_ir2s(|g,ir*)) // :: [(Scope,Step)]

  // resolve_i_r2s(|Graph,[Ref]) :: (Ref,Label) -|-> [(Scope,Step)]
  resolve_i_ir2s(|g,ir*) =
    ?(r,l)
  ; <resolve(|g,ir*)> r // :: [(Decl,Path)]
  ; filter(?(<G-assoc> (g,<id>),_)) // :: [Scope]
  ; map(!(<id>,N(I(),r,<id>,l))) // :: [(Scope,Step)]

  // env_i_sl2env(|Graph,[Ref],[Scope]) :: (Scope,Step) -> Env
  env_i_s2env(|g,ir*,s*) =
    ?(s,step)
  ; <env_l(|g,ir*,s*)> s // :: Env
  ; fmap(mapv(mapv(![step|<id>]))) // :: Env

  // env_p(|Graph,[Ref],[Scope]) :: Scope -> Env
  env_p(|g,ir*,s*) =
    with(dbg-res(|"env_p "))
  ; ?s
  ; ( s' := <G-parent> (g,s)
    < env_v(|g,ir*,[s|s*])
    ; fmap(mapv(mapv(![E(P(),s',None())|<id>]))) // :: Env
    + <pureP> []
    )
  ; with(dbg-res(pp-Env|"env_p "))

  // shadow :: (Env, Env) -> Env
  shadow =
    twrapP // :: Partial ([(Name,[(Decl,Path)])], [(Name,[(Decl,Path)])])
  ; fmap(merge(union,Fst)) // :: Env

rules
 
  path-labels = filter(step-label)
  step-label = ?E(_,_,<not(?None())>) 
  step-label = ?N(_,_,_,<not(?None())>) 

  get-names(|g): Declarations(ns,s) -> <G-decls;filter-ns(|ns)> (g,s)
  get-names(|g): References(ns,s) -> <G-refs;filter-ns(|ns)> (g,s)
  get-names(|g): Visibles(ns,s) -> <env_v(|g,[],[]);fromTotal;values;concat;map(Fst);filter-ns(|ns)> s
 
  pp-Env = fmap(map((pp-Name,map((pp-DeclId,pp-Path)))))

  dbg-res(s|n) = id // s ; debug(!n)
  dbg-res(|n) = dbg-res(id|n)
  dbg-res(s) = dbg-res(s|"")
