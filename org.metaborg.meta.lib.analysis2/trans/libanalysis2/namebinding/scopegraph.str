module libanalysis2/namebinding/scopegraph

imports
  libanalysis2/pp
  libanalysis2/prelude/-
  signatures/libanalysis2/-

rules

  G-new = !G([(Global(),<G--new_s>)],[])
  G--new_s = !S(None(),[],[],[],[])
  G-with-parent   = ?(G(s*,a*),s,p)  ; !G(<update(?S(_,d*,r*,ri*,si*);!S(p,d*,r*,ri*,si*)      ,G--new_s)> (s,s*), a*)
  G-with-decl     = ?(G(s*,a*),s,d)  ; !G(<update(?S(p,d*,r*,ri*,si*);!S(p,[d|d*],r*,ri*,si*)  ,G--new_s)> (s,s*), a*)
  G-with-ref      = ?(G(s*,a*),s,r)  ; !G(<update(?S(p,d*,r*,ri*,si*);!S(p,d*,[r|r*],ri*,si*)  ,G--new_s)> (s,s*), a*)
  G-with-r-import = ?(G(s*,a*),s,r)  ; !G(<update(?S(p,d*,r*,ri*,si*);!S(p,d*,r*,[r|ri*],si*)  ,G--new_s)> (s,s*), a*)
  G-with-s-import = ?(G(s*,a*),s,s') ; !G(<update(?S(p,d*,r*,ri*,si*);!S(p,d*,r*,ri*,[s'|si*]) ,G--new_s)> (s,s*), a*)
  G-with-assoc    = ?(G(s*,a*),d,s)  ; !G(s*                                                                     , [(d,s)|a*])

  G-refs             = ?G(<id>,_) ; map(?(_,<id>);?S(_,_,<id>,_,_)) ; concat
  G-scope            = ?(G(<id>,_),r) ; getfirst(G-scope_exists(|r))
  G-scope_exists(|r) = ?(s,S(_,_,r*,_,_)) ; <elem> (r,r*) ; !s
  G-parent           = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(<not(?None())>,_,_,_,_)
  G-decls            = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(_,<id>,_,_,_)
  G-refs             = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(_,_,<id>,_,_)
  G-r-imports        = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(_,_,_,<id>,_)
  G-s-imports        = ?(G(s*,_),s) ; <lookup> (s,s*) ; ?S(_,_,_,_,<id>)
  G-assoc            = ?(G(_,a*),d) ; <lookup> (d,a*)

rules

  id-eq = (id-atom,id-atom) ; eq

  id-atom = ?Name(_,_)
  id-atom = !Name(<id-ns>,<id-name>)

  id-name = ?Name(_,<strip-annos>)
  id-name = ?RefId(_,<strip-annos>,_)
  id-name = ?DeclId(_,<strip-annos>,_)

  id-ns = ?Name(<strip-annos>,_)
  id-ns = ?RefId(<strip-annos>,_,_)
  id-ns = ?DeclId(<strip-annos>,_,_)

  filter-ns(|ns) = filter(where(id-ns ; ?ns))