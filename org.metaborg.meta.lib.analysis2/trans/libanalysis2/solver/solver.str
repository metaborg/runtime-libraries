module libanalysis2/solver/solver

imports
  signatures/libanalysis2/solver/-
  runtime/editor/annotations
  runtime/editor/origins
  runtime/task/messages
  libanalysis2/prelude/-
  libanalysis2/pp
  libanalysis2/solver/-
  libanalysis2/equality/functions

rules
	
  solve-fact = fail
  
  solve-constraint = fail	
	
  constraint-priority = fail	
	
rules

  initial-solution = sol-new;pureWM

  solve-constraints-phase1: c* -> s
  with
    s := <csolve( solve-specialise
                , ( solve-fact
                  + solve-trivial-constraints
                  )
                )> c*

  solve-constraints-phase2: c* -> s
  with
    s := <csolve( solve-specialise
                , ( solve-constraint
                  + solve-trivial-constraints
                  )
                )> c*

  solve-specialise: (sol-wm,c) -> res
  with <fromWM;sol-s> sol-wm => s*
     ; <fromWM> sol-wm => sol
     ; <S-apply(is-var)> (s*,c) => c'
     ; {| ReduceErrors:
            rules(ReduceErrors : _ -> [])
          ; <bottomup(try(reduce-op(|sol-wm)))> c' => c''
          ; re* := <ReduceErrors>
          ; if [] := re*
            then
              !(sol-wm,c'')
            else
              msg' := <get-constraint-message> c'
            ; msg'' := <foldr(!msg',{ ?(re,<id>) ; detail-message(|re) })> re*
            ; sol-wm' := <add-message(id|msg'')> sol-wm
            ; !(sol-wm',CTrue())
            end
       |} => res

  add-reduce-error(|msg) =
    where(msg* := <ReduceErrors> ; rules(ReduceErrors : _ -> [msg|msg*]))

rules
 
  solve-trivial-constraints: (CTrue(),sol-wm) -> [(sol-wm,[])]
  solve-trivial-constraints: (CAndStar(c*),sol-wm) -> [(sol-wm,c*)]

rules

  sort-constraints = qsort((constraint-priority,constraint-priority);lt)

  constraint-priority-or-default = constraint-priority <+ 99

rules
 
  debug-solve(s): i@(c,sol-wm) -> o*
    where s => o*
    with <debug> $[solve [<pp-Constraint> c]]
       ; <map(Snd;map(pp-Constraint);debug(!"--> "))> o*
