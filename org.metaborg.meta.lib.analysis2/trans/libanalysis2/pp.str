module libanalysis2/pp

imports

  libstratego-gpp
  runtime/tmpl/pp
  include/libanalysis2-parenthesize
  signatures/libanalysis2/namebinding/-
  signatures/libanalysis2/positioning/-
  signatures/libanalysis2/typechecking/-
  pp/libanalysis2/equality/-
  pp/libanalysis2/namebinding/-
  pp/libanalysis2/positioning/-
  pp/libanalysis2/solver/-
  pp/libanalysis2/typechecking/-
  libanalysis2/pp/overrides
  libanalysis2/prelude/-

rules

  pp-Analysis(pp) =
      parenthesize-libanalysis2
    ; (pp <+ debug(!"WARNING: Could not pp ") ; prettyprint-Term)
    ; !V([], <id>)
    ; box2text-string(|120)

  pp-DeclId               = pp-Analysis(prettyprint-DeclId)
  pp-RefId                = pp-Analysis(prettyprint-RefId)
  pp-Name                 = pp-Analysis(prettyprint-Name)
  pp-ScopeId              = pp-Analysis(prettyprint-ScopeId)
  pp-Pos                  = pp-Analysis(prettyprint-Pos)
  pp-Var                  = pp-Analysis(prettyprint-Var)
  pp-Constraint           = pp-Analysis(prettyprint-Constraint)
  pp-Path                 = pp-Analysis(prettyprint-Path)
  pp-Type                 = pp-Analysis(prettyprint-Type)
  pp-TypeDef              = pp-Analysis(prettyprint-TypeDef)
  pp-TypeArg              = pp-Analysis(prettyprint-TypeArg)
  pp-TypeCon              = pp-Analysis(prettyprint-TypeCon)
  pp-Message              = pp-Analysis(prettyprint-Message)
  pp-MessageContent       = pp-Analysis(prettyprint-MessageContent)
  pp-Substitution         = pp-Analysis(prettyprint-Substitution)
  pp-Env                  = pp-Analysis(prettyprint-Env)
  pp-Term                 = pp-Analysis(prettyprint-Term)
  pp-List(pp)             = pp-Analysis(prettyprint-list(pp))

rules

  irrelevant-constraint = ?CTypeOf(<irrelevant-pos>,_,_)
  irrelevant-pos = ?Pos(_,_)

  pp-analysis = qsort((pp-order,pp-order);lt) ; map(try(pp-sanitize)) ; pp-Analysis(prettyprint-Analysis)

  pp-order: Constraints(_) -> 1
  pp-order: InitialScopeGraph(_) -> 2
  pp-order: InitialResolution(_) -> 3
  pp-order: ScopeGraph(_) -> 4
  pp-order: Resolution(_) -> 5
  pp-order: PositionTypes(_) -> 6
  pp-order: SubtypingRelation(_) -> 7
  pp-order: Substitution(_) -> 8
  pp-order: Errors(_) -> 9
  pp-order: Warnings(_) -> 10
  pp-order: Notes(_) -> 11
  pp-order: AlternativeSolutions(_) -> 99
  pp-order: _ -> 100

  pp-sanitize = Constraints(filter(not(irrelevant-constraint)))
  pp-sanitize = PositionTypes(filterk(not(irrelevant-pos)))
  pp-sanitize = AlternativeSolutions(map-with-index(id))
