module nabl/check

imports
	
	nabl/resolve
	nabl/collect
	nabl/query
	nabl/tasks
	nabl/entries
	nabl/interface
	nabl/uri
	nabl/utils
	task/core
	task/messages
	task/tasks
	
rules // Error checking tasks
	
	nabl-unresolved-task(|partition, task):
		name -> name
		where
			not(nabl-check-disable-unresolved)
		with
			<nabl-fix-name; task-create-error-on-failure(|partition, task, "Unresolved reference")> name
			
	nabl-duplicate-task(|ctx, unique):
		name -> name
		where
			uri := <nabl-uri> name;
			ns	:= <nabl-uri-namespace> uri;
			not(<nabl-check-disable-duplicate(|uri, ns)> name)
		with
			if Unique() := unique then
				uri'		:= <nabl-uri-parent> uri;
				resolve := <nabl-create-resolvedefs(|ctx, ns, name, [])> uri';
				if(
					parent:= <nabl-uri-name> uri';
					parent-ns := <nabl-uri-namespace> uri'
				)then
					<task-create-error-on-multiple(|ctx, resolve, ["Duplicate ", <pp-ns>ns ," ", name , " in ", <pp-ns>parent-ns, " ", parent ])> name
				else
					<task-create-error-on-multiple(|ctx, resolve, ["Duplicate ", <pp-ns>ns ," ", name])> name
				end
			end

	pp-ns = write-to-string;string-replace(|"NablNs","")

rules // Legacy
 
	nabl-is-unresolved =
		?node;
		has-annos;
		get-annos;
		where(nabl-has-reference);
		not(nabl-collect-one-resolved-def)
	
	nabl-get-ambiguities =
		nabl-collect-all-resolved-defs;
		mapconcat(nabl-get-all-aliases);
		filter(nabl-uri; nabl-uri-parent);
		make-set;
		where(<gt> (<length>, 1))
	
	nabl-get-duplicate-definitions =
		has-annos;
		get-annos;
		collect-one(?Def(_));
		nabl-get-all-definitions;
		make-set;
		where(<gt> (<length>, 1))
